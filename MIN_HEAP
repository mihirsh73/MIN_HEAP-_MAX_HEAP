#include <iostream>
using namespace std;
class min_heap{
  public:
  int arr[1000];
  int size=0;
  min_heap()
  {
      arr[0]=0;
  }
  void insert(int value)
  {
      size++;
      int index=size;
      arr[index]=value;
      while(index>1)
      {
          int parent= index/2;
          if(arr[index]<arr[parent])
          {
              swap(arr[parent],arr[index]);
              index=parent;
          }
          else{
              return;
          }
      }
  }
  void heapify(int i)
  {
      int left = 2*i;
      int right= 2*i+1;
      int smallest=i;
      if(left<=size && arr[left]<arr[i])
      {
          smallest=left;
      }
      if(right<=size && arr[right]<arr[smallest])
      {
          smallest=right;
      }
      if(smallest!=i)
      {
          swap(arr[i],arr[smallest]);
          heapify(smallest);
      }
  }
  void delete_minheap()
  {
      arr[1]=arr[size];
      size--;
      heapify(1);
  }
  void print()
  {
      for(int i=1; i<=size; i++)
      {
          cout<<arr[i]<<" ";
      }
      cout<<endl;
  }

};
int main() {
    min_heap hp;
    hp.insert(60);
    hp.insert(70);
    hp.insert(43);
    hp.insert(19);
    hp.insert(90);
    hp.delete_minheap();
    hp.print();
}
// INSERTION , DELETION LOg(n) get_min o(1)
