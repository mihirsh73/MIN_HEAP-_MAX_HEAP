
typedef pair<int, pair<int, int> > ppi;
 
// This function takes an array of arrays as an
// argument and all arrays are assumed to be        // value, array,index of that array
// sorted. It returns m-th smallest element in
// the array obtained after merging the given
// arrays.
int mThLargest(vector<vector<int> > arr, int m)
{
    // Create a min heap with k heap nodes. Every
    // heap node has first element of an array
    priority_queue<ppi, vector<ppi>, greater<ppi> > pq;                
 
    for (int i = 0; i < arr.size(); i++)
        pq.push({ arr[i][0], { i, 0 } });
 
    // Now one by one get the minimum element
    // from min heap and replace it with next
    // element of its array
    int count = 0;
    int i = 0, j = 0;                                 // TC O(M(LOG(K))  sc O(3N)
    while (count < m && pq.empty() == false) {
        ppi curr = pq.top();
        pq.pop();
 
        // i ==> Array Number
        // j ==> Index in the array number
        i = curr.second.first;
        j = curr.second.second;
 
        // The next element belongs to same array as
        // current.
        if (j + 1 < arr[i].size())
            pq.push({ arr[i][j + 1], { i, j + 1 } });
 
        count++;
    }
 
    return arr[i][j];
}
